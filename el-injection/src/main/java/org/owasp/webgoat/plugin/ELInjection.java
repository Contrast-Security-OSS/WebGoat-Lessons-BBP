package org.owasp.webgoat.plugin;import org.apache.ecs.Element;import org.apache.ecs.ElementContainer;import org.apache.ecs.html.BR;import org.apache.ecs.html.Input;import org.apache.ecs.html.P;import org.apache.ecs.html.PRE;import org.owasp.webgoat.lessons.Category;import org.owasp.webgoat.lessons.SequentialLessonAdapter;import org.owasp.webgoat.session.DatabaseUtilities;import org.owasp.webgoat.session.ECSFactory;import org.owasp.webgoat.session.WebSession;import java.sql.Connection;import java.util.ArrayList;import java.util.List;import org.springframework.expression.Expression;import org.springframework.expression.ExpressionParser;import org.springframework.expression.spel.standard.SpelExpressionParser;import org.springframework.expression.spel.support.StandardEvaluationContext;/*************************************************************************************************** *  *  * This file is part of WebGoat, an Open Web Application Security Project utility. For details, * please see http://www.owasp.org/ *  * Copyright (c) 2002 - 20014 Bruce Mayhew *  * This program is free software; you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation; either version 2 of the * License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU * General Public License for more details. *  * You should have received a copy of the GNU General Public License along with this program; if * not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA * 02111-1307, USA. *  * Getting Source ============== *  * Source for this application is maintained at https://github.com/WebGoat/WebGoat, a repository for free software * projects. *  * For details, please see http://webgoat.github.io *  * @author Bruce Mayhew <a href="http://code.google.com/p/webgoat">WebGoat</a> * @created October 28, 2003 */public class ELInjection extends SequentialLessonAdapter{    private final static String ACCT_NAME = "account_name";    private static String STAGE = "stage";    private String accountName;    /**     * Description of the Method     *      * @param s     *            Description of the Parameter     * @return Description of the Return Value     */    protected Element createContent(WebSession s)    {        return super.createStagedContent(s);    }    protected Element doStage1(WebSession s) throws Exception    {        return injectableExpression(s);    }    protected Element injectableExpression(WebSession s)    {        ElementContainer ec = new ElementContainer();        try        {            Connection connection = DatabaseUtilities.getConnection(s);            ec.addElement(makeAccountLine(s));            String exp = accountName;            if(accountName.length() < 3)                accountName = "'X'";            ec.addElement(new PRE(exp));            // ** Modified to test for EL injection            ExpressionParser expressionParser = new SpelExpressionParser();            Expression expression = expressionParser.parseExpression(exp);            String result = (String) expression.getValue();            ec.addElement(new PRE(result));        } catch (Exception e)        {            s.setMessage(getLabelManager().get("ErrorGenerating") + this.getClass().getName());            e.printStackTrace();        }        return (ec);    }    protected Element makeAccountLine(WebSession s)    {        ElementContainer ec = new ElementContainer();        ec.addElement(new P().addElement(getLabelManager().get("EnterLastName")));        accountName = s.getParser().getRawParameter(ACCT_NAME, "X");        Input input = new Input(Input.TEXT, ACCT_NAME, accountName.toString());        ec.addElement(input);        Element b = ECSFactory.makeButton(getLabelManager().get("Go!"));        ec.addElement(b);        return ec;    }    /**     * Gets the category attribute of the SqNumericInjection object     *      * @return The category value     */    protected Category getDefaultCategory()    {        return Category.INJECTION;    }    /**     * Gets the hints attribute of the DatabaseFieldScreen object     *      * @return The hints value     */    protected List<String> getHints(WebSession s)    {        List<String> hints = new ArrayList<String>();                hints.add(getLabelManager().get("ELInjectionHint1"));        hints.add(getLabelManager().get("ELInjectionHint2"));        hints.add(getLabelManager().get("ELInjectionHint3"));        hints.add(getLabelManager().get("ELInjectionHint4"));        return hints;    }    private final static Integer DEFAULT_RANKING = new Integer(75);    protected Integer getDefaultRanking()    {        return DEFAULT_RANKING;    }    /**     * Gets the title attribute of the DatabaseFieldScreen object     *      * @return The title value     */    public String getTitle()    {        return ("Expression Language Injection");    }}